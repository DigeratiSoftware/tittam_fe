// This file is generated automatically by Next.js
// Do not edit this file manually
// This file validates that all pages and layouts export the correct types

import type { AppRoutes, LayoutRoutes, ParamMap, AppRouteHandlerRoutes } from "./routes.js"
import type { ResolvingMetadata, ResolvingViewport } from "next/types.js"
import type { NextRequest } from 'next/server.js'

type AppPageConfig<Route extends AppRoutes = AppRoutes> = {
  default: React.ComponentType<{ params: Promise<ParamMap[Route]> } & any> | ((props: { params: Promise<ParamMap[Route]> } & any) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type LayoutConfig<Route extends LayoutRoutes = LayoutRoutes> = {
  default: React.ComponentType<LayoutProps<Route>> | ((props: LayoutProps<Route>) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type RouteHandlerConfig<Route extends AppRouteHandlerRoutes = AppRouteHandlerRoutes> = {
  GET?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  POST?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  PUT?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  PATCH?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  DELETE?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  HEAD?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  OPTIONS?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
}


// Validate ../../app/dashboard/components/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/dashboard/components">> = Specific
  const handler = {} as typeof import("../../app/dashboard/components/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/dashboard/contractors/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/dashboard/contractors">> = Specific
  const handler = {} as typeof import("../../app/dashboard/contractors/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/dashboard/drive/manage/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/dashboard/drive/manage">> = Specific
  const handler = {} as typeof import("../../app/dashboard/drive/manage/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/dashboard/drive/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/dashboard/drive">> = Specific
  const handler = {} as typeof import("../../app/dashboard/drive/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/dashboard/fields/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/dashboard/fields">> = Specific
  const handler = {} as typeof import("../../app/dashboard/fields/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/dashboard/info-hub/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/dashboard/info-hub">> = Specific
  const handler = {} as typeof import("../../app/dashboard/info-hub/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/dashboard/masters/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/dashboard/masters">> = Specific
  const handler = {} as typeof import("../../app/dashboard/masters/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/dashboard/meetings/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/dashboard/meetings">> = Specific
  const handler = {} as typeof import("../../app/dashboard/meetings/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/dashboard/notifications/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/dashboard/notifications">> = Specific
  const handler = {} as typeof import("../../app/dashboard/notifications/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/dashboard/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/dashboard">> = Specific
  const handler = {} as typeof import("../../app/dashboard/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/dashboard/reports/dashboard/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/dashboard/reports/dashboard">> = Specific
  const handler = {} as typeof import("../../app/dashboard/reports/dashboard/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/dashboard/reports/meeting/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/dashboard/reports/meeting">> = Specific
  const handler = {} as typeof import("../../app/dashboard/reports/meeting/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/dashboard/reports/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/dashboard/reports">> = Specific
  const handler = {} as typeof import("../../app/dashboard/reports/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/dashboard/reports/scheme/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/dashboard/reports/scheme">> = Specific
  const handler = {} as typeof import("../../app/dashboard/reports/scheme/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/dashboard/schemes/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/dashboard/schemes">> = Specific
  const handler = {} as typeof import("../../app/dashboard/schemes/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/dashboard/smart-sheets/create/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/dashboard/smart-sheets/create">> = Specific
  const handler = {} as typeof import("../../app/dashboard/smart-sheets/create/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/dashboard/smart-sheets/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/dashboard/smart-sheets">> = Specific
  const handler = {} as typeof import("../../app/dashboard/smart-sheets/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/dashboard/smart-sheets/shared/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/dashboard/smart-sheets/shared">> = Specific
  const handler = {} as typeof import("../../app/dashboard/smart-sheets/shared/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/dashboard/smart-sheets/view/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/dashboard/smart-sheets/view">> = Specific
  const handler = {} as typeof import("../../app/dashboard/smart-sheets/view/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/dashboard/smart-view/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/dashboard/smart-view">> = Specific
  const handler = {} as typeof import("../../app/dashboard/smart-view/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/dashboard/sub-components/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/dashboard/sub-components">> = Specific
  const handler = {} as typeof import("../../app/dashboard/sub-components/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/dashboard/support/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/dashboard/support">> = Specific
  const handler = {} as typeof import("../../app/dashboard/support/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/dashboard/templates/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/dashboard/templates">> = Specific
  const handler = {} as typeof import("../../app/dashboard/templates/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/dashboard/users/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/dashboard/users">> = Specific
  const handler = {} as typeof import("../../app/dashboard/users/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/dashboard/work/create/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/dashboard/work/create">> = Specific
  const handler = {} as typeof import("../../app/dashboard/work/create/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/dashboard/work/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/dashboard/work">> = Specific
  const handler = {} as typeof import("../../app/dashboard/work/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/">> = Specific
  const handler = {} as typeof import("../../app/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/notifications/[id]/read/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/notifications/[id]/read">> = Specific
  const handler = {} as typeof import("../../app/api/notifications/[id]/read/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/notifications/[id]/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/notifications/[id]">> = Specific
  const handler = {} as typeof import("../../app/api/notifications/[id]/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/notifications/all/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/notifications/all">> = Specific
  const handler = {} as typeof import("../../app/api/notifications/all/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/notifications/read-all/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/notifications/read-all">> = Specific
  const handler = {} as typeof import("../../app/api/notifications/read-all/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/notifications/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/notifications">> = Specific
  const handler = {} as typeof import("../../app/api/notifications/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/notifications/unread-count/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/notifications/unread-count">> = Specific
  const handler = {} as typeof import("../../app/api/notifications/unread-count/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/reports/dashboard/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/reports/dashboard">> = Specific
  const handler = {} as typeof import("../../app/api/reports/dashboard/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/reports/meeting/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/reports/meeting">> = Specific
  const handler = {} as typeof import("../../app/api/reports/meeting/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/reports/scheme/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/reports/scheme">> = Specific
  const handler = {} as typeof import("../../app/api/reports/scheme/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}





// Validate ../../app/layout.tsx
{
  type __IsExpected<Specific extends LayoutConfig<"/">> = Specific
  const handler = {} as typeof import("../../app/layout.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}
