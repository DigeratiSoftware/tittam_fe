{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/rajes/Documents/projects/TITTAM/tittam_fe/services/component-service.ts"],"sourcesContent":["import { apiClient } from \"../lib/api-client\"\n\nexport interface Component {\n  id: string\n  componentId: string // Added componentId field for API mapping\n  englishName: string\n  tamilName: string\n  componentType: string\n  componentTypeEnglish: string // Added componentTypeEnglish field for display\n  remark: string\n  createdDate: string\n  createdBy: string\n  fieldsCount?: number\n}\n\nexport interface CreateComponentRequest {\n  englishName: string\n  tamilName: string\n  componentType: string\n  remark: string\n}\n\ninterface ApiComponent {\n  _id: string\n  componentId: string\n  englishName: string\n  tamilName: string\n  componentType?: string // Made optional since API doesn't always provide this\n  componentTypeEnglish: string // Added componentTypeEnglish field from API response\n  componentTypeTamil?: string // Added optional Tamil component type\n  remark: string\n  createdAt: string\n  createdBy: string\n  updatedAt: string\n}\n\nexport const COMPONENT_TYPES = [\"Infrastructure\", \"Individual\"]\n\nfunction getComponentTypeEnglish(componentType: string): string {\n  const typeMapping: Record<string, string> = {\n    Infrastructure: \"Infrastructure\",\n    Individual: \"Individual\",\n    infrastructure: \"Infrastructure\",\n    individual: \"Individual\",\n  }\n  return typeMapping[componentType] || componentType\n}\n\nfunction mapApiComponentToComponent(apiComponent: ApiComponent): Component {\n  return {\n    id: apiComponent.componentId, // Use componentId instead of _id for mapping\n    componentId: apiComponent.componentId,\n    englishName: apiComponent.englishName,\n    tamilName: apiComponent.tamilName,\n    componentType: apiComponent.componentTypeEnglish, // Use componentTypeEnglish from API as componentType\n    componentTypeEnglish: apiComponent.componentTypeEnglish, // Keep original field for reference\n    remark: apiComponent.remark,\n    createdDate: new Date(apiComponent.createdAt).toISOString().split(\"T\")[0],\n    createdBy: apiComponent.createdBy,\n    fieldsCount: 0, // Default value as not provided by API\n  }\n}\n\nclass ComponentService {\n  async getAllComponents(): Promise<Component[]> {\n    try {\n      console.log(\"[v0] Fetching components from API...\")\n      const response = await apiClient.get<{ success: boolean; data: ApiComponent[] }>(\"/api/v1/components\")\n\n      if (response.success && response.data) {\n        console.log(\"[v0] Components fetched successfully:\", response.data.length)\n        return response.data.map(mapApiComponentToComponent)\n      }\n\n      console.log(\"[v0] API response unsuccessful, returning empty array\")\n      return []\n    } catch (error) {\n      console.error(\"[v0] Error fetching components:\", error)\n      return []\n    }\n  }\n\n  async createComponent(request: CreateComponentRequest): Promise<Component> {\n    try {\n      console.log(\"[v0] Creating component:\", request)\n      const response = await apiClient.post<{ success: boolean; data: ApiComponent }>(\"/api/v1/components\", request)\n\n      if (response.success && response.data) {\n        console.log(\"[v0] Component created successfully:\", response.data.componentId)\n        return mapApiComponentToComponent(response.data)\n      }\n\n      throw new Error(\"Failed to create component\")\n    } catch (error) {\n      console.error(\"[v0] Error creating component:\", error)\n      throw error\n    }\n  }\n\n  async getComponentById(componentId: string): Promise<Component | null> {\n    try {\n      console.log(\"[v0] Fetching component by ID:\", componentId)\n      const response = await apiClient.get<{ success: boolean; data: ApiComponent }>(\n        `/api/v1/components/${componentId}`,\n      )\n\n      if (response.success && response.data) {\n        console.log(\"[v0] Component fetched successfully:\", response.data.componentId)\n        return mapApiComponentToComponent(response.data)\n      }\n\n      return null\n    } catch (error) {\n      console.error(\"[v0] Error fetching component:\", error)\n      return null\n    }\n  }\n\n  async updateComponent(componentId: string, request: CreateComponentRequest): Promise<Component> {\n    try {\n      console.log(\"[v0] Updating component:\", componentId, request)\n      const response = await apiClient.put<{ success: boolean; data: ApiComponent }>(\n        `/api/v1/components/${componentId}`,\n        request,\n      )\n\n      if (response.success && response.data) {\n        console.log(\"[v0] Component updated successfully:\", response.data.componentId)\n        return mapApiComponentToComponent(response.data)\n      }\n\n      throw new Error(\"Failed to update component\")\n    } catch (error) {\n      console.error(\"[v0] Error updating component:\", error)\n      throw error\n    }\n  }\n\n  async deleteComponent(componentId: string): Promise<void> {\n    try {\n      console.log(\"[v0] Deleting component:\", componentId)\n      const response = await apiClient.delete<{ success: boolean }>(`/api/v1/components/${componentId}`)\n\n      if (response.success) {\n        console.log(\"[v0] Component deleted successfully:\", componentId)\n        return\n      }\n\n      throw new Error(\"Failed to delete component\")\n    } catch (error) {\n      console.error(\"[v0] Error deleting component:\", error)\n      throw error\n    }\n  }\n}\n\nexport const componentService = new ComponentService()\n"],"names":[],"mappings":"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","debugId":null}}]
}