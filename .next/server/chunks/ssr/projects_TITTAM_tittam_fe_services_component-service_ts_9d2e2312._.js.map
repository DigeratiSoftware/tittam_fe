{"version":3,"sources":["turbopack:///[project]/projects/TITTAM/tittam_fe/services/component-service.ts"],"sourcesContent":["import { apiClient } from \"../lib/api-client\"\n\nexport interface Component {\n  id: string\n  componentId: string // Added componentId field for API mapping\n  englishName: string\n  tamilName: string\n  componentType: string\n  componentTypeEnglish: string // Added componentTypeEnglish field for display\n  remark: string\n  createdDate: string\n  createdBy: string\n  fieldsCount?: number\n}\n\nexport interface CreateComponentRequest {\n  englishName: string\n  tamilName: string\n  componentType: string\n  remark: string\n}\n\ninterface ApiComponent {\n  _id: string\n  componentId: string\n  englishName: string\n  tamilName: string\n  componentType?: string // Made optional since API doesn't always provide this\n  componentTypeEnglish: string // Added componentTypeEnglish field from API response\n  componentTypeTamil?: string // Added optional Tamil component type\n  remark: string\n  createdAt: string\n  createdBy: string\n  updatedAt: string\n}\n\nexport const COMPONENT_TYPES = [\"Infrastructure\", \"Individual\"]\n\nfunction getComponentTypeEnglish(componentType: string): string {\n  const typeMapping: Record<string, string> = {\n    Infrastructure: \"Infrastructure\",\n    Individual: \"Individual\",\n    infrastructure: \"Infrastructure\",\n    individual: \"Individual\",\n  }\n  return typeMapping[componentType] || componentType\n}\n\nfunction mapApiComponentToComponent(apiComponent: ApiComponent): Component {\n  return {\n    id: apiComponent.componentId, // Use componentId instead of _id for mapping\n    componentId: apiComponent.componentId,\n    englishName: apiComponent.englishName,\n    tamilName: apiComponent.tamilName,\n    componentType: apiComponent.componentTypeEnglish, // Use componentTypeEnglish from API as componentType\n    componentTypeEnglish: apiComponent.componentTypeEnglish, // Keep original field for reference\n    remark: apiComponent.remark,\n    createdDate: new Date(apiComponent.createdAt).toISOString().split(\"T\")[0],\n    createdBy: apiComponent.createdBy,\n    fieldsCount: 0, // Default value as not provided by API\n  }\n}\n\nclass ComponentService {\n  async getAllComponents(): Promise<Component[]> {\n    try {\n      console.log(\"[v0] Fetching components from API...\")\n      const response = await apiClient.get<{ success: boolean; data: ApiComponent[] }>(\"/api/v1/components\")\n\n      if (response.success && response.data) {\n        console.log(\"[v0] Components fetched successfully:\", response.data.length)\n        return response.data.map(mapApiComponentToComponent)\n      }\n\n      console.log(\"[v0] API response unsuccessful, returning empty array\")\n      return []\n    } catch (error) {\n      console.error(\"[v0] Error fetching components:\", error)\n      return []\n    }\n  }\n\n  async createComponent(request: CreateComponentRequest): Promise<Component> {\n    try {\n      console.log(\"[v0] Creating component:\", request)\n      const response = await apiClient.post<{ success: boolean; data: ApiComponent }>(\"/api/v1/components\", request)\n\n      if (response.success && response.data) {\n        console.log(\"[v0] Component created successfully:\", response.data.componentId)\n        return mapApiComponentToComponent(response.data)\n      }\n\n      throw new Error(\"Failed to create component\")\n    } catch (error) {\n      console.error(\"[v0] Error creating component:\", error)\n      throw error\n    }\n  }\n\n  async getComponentById(componentId: string): Promise<Component | null> {\n    try {\n      console.log(\"[v0] Fetching component by ID:\", componentId)\n      const response = await apiClient.get<{ success: boolean; data: ApiComponent }>(\n        `/api/v1/components/${componentId}`,\n      )\n\n      if (response.success && response.data) {\n        console.log(\"[v0] Component fetched successfully:\", response.data.componentId)\n        return mapApiComponentToComponent(response.data)\n      }\n\n      return null\n    } catch (error) {\n      console.error(\"[v0] Error fetching component:\", error)\n      return null\n    }\n  }\n\n  async updateComponent(componentId: string, request: CreateComponentRequest): Promise<Component> {\n    try {\n      console.log(\"[v0] Updating component:\", componentId, request)\n      const response = await apiClient.put<{ success: boolean; data: ApiComponent }>(\n        `/api/v1/components/${componentId}`,\n        request,\n      )\n\n      if (response.success && response.data) {\n        console.log(\"[v0] Component updated successfully:\", response.data.componentId)\n        return mapApiComponentToComponent(response.data)\n      }\n\n      throw new Error(\"Failed to update component\")\n    } catch (error) {\n      console.error(\"[v0] Error updating component:\", error)\n      throw error\n    }\n  }\n\n  async deleteComponent(componentId: string): Promise<void> {\n    try {\n      console.log(\"[v0] Deleting component:\", componentId)\n      const response = await apiClient.delete<{ success: boolean }>(`/api/v1/components/${componentId}`)\n\n      if (response.success) {\n        console.log(\"[v0] Component deleted successfully:\", componentId)\n        return\n      }\n\n      throw new Error(\"Failed to delete component\")\n    } catch (error) {\n      console.error(\"[v0] Error deleting component:\", error)\n      throw error\n    }\n  }\n}\n\nexport const componentService = new ComponentService()\n"],"names":[],"mappings":"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"}