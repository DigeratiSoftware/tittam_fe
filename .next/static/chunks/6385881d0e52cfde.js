(globalThis.TURBOPACK||(globalThis.TURBOPACK=[])).push(["object"==typeof document?document.currentScript:void 0,39403,86997,e=>{"use strict";class t{static ACCESS_TOKEN_KEY="access_token";static REFRESH_TOKEN_KEY="refresh_token";static USER_KEY="user_data";static setTokens(e,t){localStorage.setItem(this.ACCESS_TOKEN_KEY,e),localStorage.setItem(this.REFRESH_TOKEN_KEY,t)}static getAccessToken(){return localStorage.getItem(this.ACCESS_TOKEN_KEY)}static getRefreshToken(){return localStorage.getItem(this.REFRESH_TOKEN_KEY)}static setUser(e){localStorage.setItem(this.USER_KEY,JSON.stringify(e))}static getUser(){{let e=localStorage.getItem(this.USER_KEY);return e?JSON.parse(e):null}}static clearAll(){localStorage.removeItem(this.ACCESS_TOKEN_KEY),localStorage.removeItem(this.REFRESH_TOKEN_KEY),localStorage.removeItem(this.USER_KEY)}static hasTokens(){return!!(this.getAccessToken()&&this.getRefreshToken())}}e.s(["TokenStorage",()=>t],86997);let r=new class{baseUrl;constructor(e="http://127.0.0.1:4000"){this.baseUrl=e}async request(e,r={}){try{let s=`${this.baseUrl}${e}`;console.log("[v0] Making API request to:",s);let o={"Content-Type":"application/json",...r.headers};if(!e.includes("/login")){let e=t.getAccessToken(),r=t.getRefreshToken();e&&(o.Authorization=`Bearer ${e}`),r&&(o["x-refresh-token"]=r)}let n={headers:o,...r};console.log("[v0] Request config:",{url:s,method:n.method,headers:o});let a=await fetch(s,n);console.log("[v0] Response status:",a.status,a.statusText);let i=await a.json();if(!a.ok)return console.log("[v0] API error response:",i),{success:!1,error:i.message||`HTTP error! status: ${a.status}`};return console.log("[v0] API success response:",i),{success:!0,data:i}}catch(t){console.error("[v0] API request failed:",t);let e=t instanceof Error?t.message:"Unknown error occurred";if(t instanceof TypeError&&t.message.includes("fetch"))return{success:!1,error:`Network error: Unable to connect to API server at ${this.baseUrl}. Please ensure the API server is running.`};return{success:!1,error:e}}}async get(e){return this.request(e,{method:"GET"})}async post(e,t){return this.request(e,{method:"POST",body:t?JSON.stringify(t):void 0})}async put(e,t){return this.request(e,{method:"PUT",body:t?JSON.stringify(t):void 0})}async delete(e){return this.request(e,{method:"DELETE"})}async patch(e,t){return this.request(e,{method:"PATCH",body:t?JSON.stringify(t):void 0})}};e.s(["apiClient",0,r],39403)},61808,e=>{"use strict";var t=e.i(45042),r=e.i(97817),s=e.i(39403),o=e.i(86997);let n=new class{BASE_ENDPOINT="/api/v1/users";async login(e){let t=await s.apiClient.post(`${this.BASE_ENDPOINT}/login`,e);if(t.success&&t.data){let e=t.data.user,r={id:e._id,username:e.email,email:e.email,role:e.role,name:e.name,phone:e.phone,isActive:e.isActive,userId:e.userId,currentLoginAt:e.currentLoginAt,lastLoginAt:e.lastLoginAt};return o.TokenStorage.setTokens(t.data.accessToken,t.data.refreshToken),o.TokenStorage.setUser(r),{user:r,accessToken:t.data.accessToken,refreshToken:t.data.refreshToken}}throw Error(t.error||"Login failed")}async logout(){o.TokenStorage.clearAll()}async getCurrentUser(){return o.TokenStorage.getUser()}isAuthenticated(){return o.TokenStorage.hasTokens()}isSuperAdmin(e){return"super_admin"===e.role}isAdmin(e){return"admin"===e.role||"super_admin"===e.role}},a=(0,r.createContext)(void 0);function i({children:e}){let[s,i]=(0,r.useState)(null),[c,l]=(0,r.useState)(!0);(0,r.useEffect)(()=>{(async()=>{try{if(o.TokenStorage.hasTokens()){let e=await n.getCurrentUser();i(e)}}catch(e){i(null)}finally{l(!1)}})()},[]);let u=async(e,t)=>{try{let r=await n.login({username:e,password:t});return i(r.user),!0}catch(e){return console.error("[v0] Login error:",e),!1}};return(0,t.jsx)(a.Provider,{value:{user:s,isLoading:c,login:u,logout:()=>{n.logout(),i(null)},isAuthenticated:!!s},children:e})}function c(){let e=(0,r.useContext)(a);if(void 0===e)throw Error("useAuth must be used within an AuthProvider");return e}e.s(["AuthProvider",()=>i,"useAuth",()=>c],61808)}]);